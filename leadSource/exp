 getCustomLeads: async (req, res) => {
    console.log('ssdsdkksdksd')
    try {
      const leads = await Leads.find({});
  console.log(leads)
      const userPromises = leads.map(async (element) => {
        const userAssociated = element.assignedUser.some(
          (ele) => ele.id == req.user._id && ele.status == true
        );
        return { lead: element, userAssociated };
      });
      const allUsers = await Promise.all(userPromises);
      const filteredUsers = allUsers.filter((userObj) => userObj.userAssociated);
  
      for (const ele of filteredUsers) {
        const expireAtDate = new Date(ele.lead.expireAt);
        const currentDate = new Date();
  
        if (ele.lead.isShow === "PENDING" && expireAtDate <= currentDate) {
            console.log("after opending")
          const newExpireAtDate = new Date(expireAtDate);
          newExpireAtDate.setHours(newExpireAtDate.getHours() + 1);
  
          try {
            let elem1Status = false;
            let elem2Status = false;  
             if (ele?.lead?.assignedUser.length <= 2 ) {
              if (ele?.lead?.assignedUser[0]?.key === "M1" && ele?.lead?.assignedUser[0]?.status) {
                console.log("inside M1")
                elem1Status = false;
                elem2Status = true;
              } else if (newExpireAtDate <= currentDate) {
               console.log("inside M2")
                elem1Status = false;
                elem2Status = false;
              }
             }
  
            await Leads.findByIdAndUpdate(
              ele.lead._id,
              {
                $set: {
                  "assignedUser.$[elem1].status": elem1Status,
                  "assignedUser.$[elem2].status": elem2Status,
                  extendedExpireAt: newExpireAtDate, // Update the expireAt field with the new value
                },
              },
              {
                arrayFilters: [
                  { "elem1.id": ele.lead.assignedUser[0].id },
                  { "elem2.id": ele.lead.assignedUser[1].id },
                ],
                new: true,
              }
            );
          } catch (error) {
            console.error("Error updating lead:", error);
          }
        }
      }
  
      return res.status(200).json({
        code: "FETCHED",
        data: filteredUsers,
      });
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        code: "ERROROCCURRED",
        data: error.message,
      });
    }
  },